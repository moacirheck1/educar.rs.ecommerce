package controller;

import entity.Cliente;
import entity.ItemPedido;
import entity.Pedido;
import entity.Produto;
import entity.TipoCliente;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import service.ClienteService;
import service.PedidoService;
import service.ProdutoService;

public class ProdutoController extends javax.swing.JFrame {

    private ProdutoService produtoService = new ProdutoService();
    private Produto produto = new Produto();

    private Cliente cliente;
    private Pedido pedido;

    public ProdutoController(Cliente cliente) {
        initComponents();
        setLocationRelativeTo(null);
        this.cliente=cliente;
        desabilitarOpcoesAdmin();
        this.pedido = new Pedido();
        this.pedido.setCliente(cliente);
        preencheTabela(produtoService.buscarProdutos(0));

    }

    public ProdutoController() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cliente = cliente;
        this.pedido = new Pedido();
//        desabilitarOpcoesAdmin();
        this.pedido.setCliente(cliente);
//        configurarLarguraColunas();
        preencheTabela(produtoService.buscarProdutos(0));
    }

    public void desabilitarOpcoesAdmin() {
        jbNovo.setVisible(false);
        jbEditar.setVisible(false);
        jbExcluir.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbNovo = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbLocalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        jbListar = new javax.swing.JButton();
        jbAvanca = new javax.swing.JButton();
        jbRetrocede = new javax.swing.JButton();
        jlblNumPagina = new javax.swing.JLabel();
        jbComprar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiFinalizarPedido = new javax.swing.JMenuItem();
        jmListar = new javax.swing.JMenuItem();
        jmiCarrinhoDeCompras = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbNovo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbEditar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbLocalizar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbLocalizar.setText("Localizar");
        jbLocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLocalizarActionPerformed(evt);
            }
        });

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Descrição", "Preço", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtTabela);
        if (jtTabela.getColumnModel().getColumnCount() > 0) {
            jtTabela.getColumnModel().getColumn(0).setResizable(false);
            jtTabela.getColumnModel().getColumn(1).setResizable(false);
            jtTabela.getColumnModel().getColumn(2).setResizable(false);
            jtTabela.getColumnModel().getColumn(3).setResizable(false);
            jtTabela.getColumnModel().getColumn(4).setResizable(false);
        }

        jbListar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbListar.setText("Listar");
        jbListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListarActionPerformed(evt);
            }
        });

        jbAvanca.setText(">>");
        jbAvanca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAvancaActionPerformed(evt);
            }
        });

        jbRetrocede.setText("<<");
        jbRetrocede.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRetrocedeActionPerformed(evt);
            }
        });

        jlblNumPagina.setText("1");
        jlblNumPagina.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jbComprar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbComprar.setText("Comprar");
        jbComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbComprarActionPerformed(evt);
            }
        });

        jMenu1.setText("Arquivo");

        jMenuItem1.setText("jMenuItem1");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");

        jmiFinalizarPedido.setText("Finalizar Pedido");
        jmiFinalizarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiFinalizarPedidoActionPerformed(evt);
            }
        });
        jMenu2.add(jmiFinalizarPedido);

        jmListar.setText("Listar");
        jmListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmListarActionPerformed(evt);
            }
        });
        jMenu2.add(jmListar);

        jmiCarrinhoDeCompras.setText("Carrinho de Compras");
        jmiCarrinhoDeCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCarrinhoDeComprasActionPerformed(evt);
            }
        });
        jMenu2.add(jmiCarrinhoDeCompras);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(96, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbRetrocede)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlblNumPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbAvanca)
                        .addGap(90, 90, 90))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jbNovo)
                .addGap(87, 87, 87)
                .addComponent(jbEditar)
                .addGap(82, 82, 82)
                .addComponent(jbExcluir)
                .addGap(68, 68, 68)
                .addComponent(jbLocalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbListar)
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jbComprar)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNovo)
                    .addComponent(jbEditar)
                    .addComponent(jbExcluir)
                    .addComponent(jbLocalizar)
                    .addComponent(jbListar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbRetrocede)
                    .addComponent(jlblNumPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAvanca))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
//     ObraLiterariaController().setVisible(true);
        new NovoProdutoController().setVisible(true);
    }//GEN-LAST:event_jbNovoActionPerformed
    private void buscarPorId() {
        ProdutoService produtoService = new ProdutoService();
        Produto produtos = new Produto();
        int id = Integer.parseInt(JOptionPane.showInputDialog("Pesquisar por"));
        produtos = produtoService.buscarProduto(id);
        if (produto != null) {
            limparTabela();
            preencheTabela(produto, 0);
        } else {
            JOptionPane.showMessageDialog(null, "nenhum produto encontrado");
        }
    }

    private void buscarPorDescricao() {
        List<Produto> produtos = new ArrayList<>();
        ProdutoService produtoService = new ProdutoService();
        String descricao = JOptionPane.showInputDialog("Pesquisar por");
        produtos = produtoService.buscarProdutoNomeDescricao(descricao);
        if (produto != null) {
            limparTabela();
            preencheTabela(produtos);
        } else {
            JOptionPane.showMessageDialog(null, "nenhum produto encontrado");
        }
    }
    private void jbLocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLocalizarActionPerformed

        if (cliente.getTipo().equals(TipoCliente.ADMIN)) {
            buscarPorId();

        } else {
            buscarPorDescricao();
        }
    }//GEN-LAST:event_jbLocalizarActionPerformed

    public void preencheTabela(Produto produto, int linha) {
        jtTabela.setValueAt("", linha, 0);
        jtTabela.setValueAt(produto.getId(), linha, 0);
        jtTabela.setValueAt("", linha, 1);
        jtTabela.setValueAt(produto.getNome(), linha, 1);
        jtTabela.setValueAt("", linha, 2);
        jtTabela.setValueAt(produto.getDescricao(), linha, 2);
        jtTabela.setValueAt("", linha, 3);
        jtTabela.setValueAt(produto.getPreco(), linha, 3);
        jtTabela.setValueAt("", linha, 4);
        jtTabela.setValueAt(produto.getQuantidade(), linha, 4);
    }
    private void jmListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmListarActionPerformed

    }//GEN-LAST:event_jmListarActionPerformed

    private void jbListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListarActionPerformed
        ProdutoService produtoService = new ProdutoService();
        preencheTabela(produtoService.buscarProdutos(0));
        jlblNumPagina.setText("1");
    }//GEN-LAST:event_jbListarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed

        if ((jtTabela.getSelectedRow() < 0) || (jtTabela.getValueAt(jtTabela.getSelectedRow(), 0) == null)) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar um registro para Editar");
        } else if (JOptionPane.showConfirmDialog(null, "Voce tem certeza que deseja excluir o produto?\n"
                + lerDadosDaLinhaSelecionada()) == 0) {
            produtoService.excluirProduto(lerDadosDaLinhaSelecionada().getId());
            limparTabela();
            preencheTabela(produtoService.buscarProdutos(0));
        }
    }//GEN-LAST:event_jbExcluirActionPerformed
    public void limparTabela() {
        for (int i = 1; i < jtTabela.getRowCount(); i++) {
            jtTabela.setValueAt(null, i, 0);
            jtTabela.setValueAt(null, i, 1);
            jtTabela.setValueAt(null, i, 2);
            jtTabela.setValueAt(null, i, 3);
            jtTabela.setValueAt(null, i, 4);
        }
    }
    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        if ((jtTabela.getSelectedRow() < 0) || (jtTabela.getValueAt(jtTabela.getSelectedRow(), 0) == null)) {
            JOptionPane.showMessageDialog(null, "Você precisa selecionar um registro para Editar");
        } else {
            new NovoProdutoController(lerDadosDaLinhaSelecionada(), jtTabela.getSelectedRow()).setVisible(true);
        }


    }//GEN-LAST:event_jbEditarActionPerformed


    private void jbRetrocedeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRetrocedeActionPerformed

        if (!jlblNumPagina.getText().equals("1")) {
            jlblNumPagina.setText((Integer.parseInt(jlblNumPagina.getText()) - 1) + "");
            int pagina = Integer.parseInt(jlblNumPagina.getText() + "");
            limparTabela();
            preencheTabela(produtoService.buscarProdutos(pagina - 1));

        }
    }//GEN-LAST:event_jbRetrocedeActionPerformed

    private void jbAvancaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAvancaActionPerformed

        int pagina = Integer.parseInt(jlblNumPagina.getText() + "");
        preencheTabela(produtoService.buscarProdutos(pagina));
        List<Produto> produtos = produtoService.buscarProdutos(pagina * 1);
        if (!produtos.isEmpty()) {
            limparTabela();
            preencheTabela(produtos);
            jlblNumPagina.setText((Integer.parseInt(jlblNumPagina.getText()) + 1) + "");
        }
    }//GEN-LAST:event_jbAvancaActionPerformed

    private void jbComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbComprarActionPerformed

        if ((jtTabela.getSelectedRow() < 0) || (jtTabela.getValueAt(jtTabela.getSelectedRow(), 0) == null)) {
            JOptionPane.showMessageDialog(null, "Selecione um produto");

        } else {

            int quantidade = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite um valor"));
            Produto produto = lerDadosDaLinhaSelecionada();
            int quantidadeNoPedido = quantidadeNoPedido(produto.getId());
            if (quantidadeNoPedido != 0) {
                IncrementaQuantidadeItem(produto, quantidade + quantidadeNoPedido);
            } else {
                adicionaNovoItem(produto, quantidade);
            }

        }

    }//GEN-LAST:event_jbComprarActionPerformed

//       for (ItemPedido ip : pedido.getItensPedido()) {
//                ped += ip.getValor();
    private void adicionaNovoItem(Produto produto, int quantidade) {
        if (verificarEstoque(produto, quantidade)) {
            pedido.getItensPedido().add(new ItemPedido(quantidade * produto.getPreco(), quantidade, produto));
            jbComprar.setText("Comprar(" + pedido.getItensPedido().size() + ")");

        } else {
            JOptionPane.showMessageDialog(null, "a quantidade nao esta disponivel no estoque");
        }
    }

    private int quantidadeNoPedido(int idProduto) {
        for (ItemPedido ip : pedido.getItensPedido()) {
            if (ip.getProduto().getId() == idProduto) {
                return ip.getQuantidade();
            }
        }
        return 0;
    }

    private void IncrementaQuantidadeItem(Produto produto, int quantidade) {
        if (verificarEstoque(produto, quantidade)) {
            for (ItemPedido ip : pedido.getItensPedido()) {
                if (ip.getProduto().getId() == produto.getId()) {
                    ip.setQuantidade(quantidade);
                    ip.setValor(ip.getProduto().getPreco() * quantidade);
                    return;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "A quantidade indicada nao esta no intervalo indicado ");
        }
    }

    private boolean verificarEstoque(Produto produto, int quantidade) {
        if ((quantidade > 0) && (produto.getQuantidade() >= quantidade)) {
            return true;
        }
        return false;
    }

    private void jmiFinalizarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiFinalizarPedidoActionPerformed
        PedidoService pedidoService = new PedidoService();

        if (pedido.getItensPedido().isEmpty()) {
            JOptionPane.showMessageDialog(null, "pedido vazio");
        } else {
            pedidoService.salvarPedido(pedido);
            limparTabela();
            preencheTabela(produtoService.buscarProdutos(0));
            jbComprar.setText("Comprar");

        }

    }//GEN-LAST:event_jmiFinalizarPedidoActionPerformed

    private void jmiCarrinhoDeComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCarrinhoDeComprasActionPerformed
        new PedidoController(pedido).setVisible(true);

    }//GEN-LAST:event_jmiCarrinhoDeComprasActionPerformed
    public void lerDadosDaLinhaSeleciona() {
        if ((jtTabela.getSelectedRow() < 0) || (jtTabela.getValueAt(jtTabela.getSelectedRow(), 0) == null)) {
            JOptionPane.showMessageDialog(null, "");
        }
    }
//
//    private int obterQuantidade() {
//        if ((jtTabela.getSelectedRow() < 0) || (jtTabela.getValueAt(jtTabela.getSelectedRow(), 0) == null)) 
//            int =Integer.parseInt(JOptionPane.showInputDialog(null, "Digite a quantidade de produtos"));
//            return null;
//
//           
//        }

    private Produto lerDadosDaLinhaSelecionada() {
        int linha = jtTabela.getSelectedRow();
        Produto produto = new Produto(
                Integer.parseInt(jtTabela.getValueAt(linha, 0).toString()),
                jtTabela.getValueAt(linha, 1).toString(),
                jtTabela.getValueAt(linha, 2).toString(),
                Double.parseDouble(
                        jtTabela.getValueAt(linha, 3).toString()),
                Integer.parseInt(jtTabela.getValueAt(linha, 4).toString()));
        return produto;
    }

    private void preencheTabela(List<Produto> produto) {
        int i = 0;
        for (Produto p : produto) {
            jtTabela.setValueAt(p.getId(), i, 0);
            jtTabela.setValueAt(p.getNome(), i, 1);
            jtTabela.setValueAt(p.getDescricao(), i, 2);
            jtTabela.setValueAt(p.getPreco(), i, 3);
            jtTabela.setValueAt(p.getQuantidade(), i, 4);
            i++;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProdutoController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProdutoController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProdutoController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProdutoController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProdutoController().setVisible(true);
            }
        });
    }

//    private ProdutoController lerCampos() {       
//        String titulo = jtfTitulo.getText();
//        String autor = jtfAutor.getText();
//        String editora = jtfEditora.getText();
//        int anoPublicacao = Integer.parseInt(jtfAnoPublicacao.getText());
//        String genero = jtfGenero.getText();
//        int nPagina = Integer.parseInt(jtfNumeroPaginas.getText());
//        String idioma = jtfIdioma.getText();
//        boolean emprestado = Boolean.parseBoolean(jtfEmprestado.getText());
//        int nCopias = Integer.parseInt(jtfNCopias.getText());
//        ObraLiteraria obraLiteraria=new ObraLiteraria(id, titulo, autor, editora, anoPublicacao, genero, nPagina, idioma, emprestado, nCopias);
//        return obraLiteraria;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAvanca;
    private javax.swing.JButton jbComprar;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbListar;
    private javax.swing.JButton jbLocalizar;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbRetrocede;
    private javax.swing.JLabel jlblNumPagina;
    private javax.swing.JMenuItem jmListar;
    private javax.swing.JMenuItem jmiCarrinhoDeCompras;
    private javax.swing.JMenuItem jmiFinalizarPedido;
    private javax.swing.JTable jtTabela;
    // End of variables declaration//GEN-END:variables
}
